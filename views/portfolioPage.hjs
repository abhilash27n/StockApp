<!DOCTYPE html>
<html>
  <head>
   <meta charset='utf-8'>
   <meta http-equiv="X-UA-Compatible" content="IE=edge">
   <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Aviato - Portfolio Page</title>
    <link rel='stylesheet' href='/stylesheets/style.css'/>
    <link rel="stylesheet"  href="/stylesheets/select2.css"/>
	
	<!-- for menu bar -->
	<link rel="stylesheet"  href="/stylesheets/styles-menu.css"/>

    <!--for ajax and selectable stuff-->
    <script src="../javascripts/jquery-1.10.2.js"></script>
    <script src="../javascripts/select2.js"></script>

    <!-- For highcharts -->
    <script src="../javascripts/Highstock-4.2.4/js/highstock.js"></script>
	<script src="../javascripts/Highstock-4.2.4/js/modules/exporting.js"></script>
  </head>
  <body>
  <div id='cssmenu'>
	<ul>
	   <li class='active'><a href='#'><span>Portfolio Analysis</span></a></li>
	   <li><a href='/stockSelectionPage'><span>Portfolio Management</span></a></li>
	   <li><a href='/queryInterface'><span>Query Interface</span></a></li>
	   <li class='last'><a href='/logout'><span>Logout</span></a></li>
	</ul>
	</div>
  <h1>Welcome, {{ username }}</h1>

  <!-- HIDDEN DIV TO STORE USER NAME AND USER ID and also for selling or buying stock-->
  <div id="hiddenTextFields" style="display: none;">
 	 <form id="buyOrSell" action="/buyOrSell" method="post">
		  <input type="text" value="{{ username }}" id="username" name="username"/>
		  <input type="text" value="{{ userid }}" id="userid" name="userid"/>
		  <input type="submit" id="hiddenSubmitButton"/>
	  </form>
  </div>

  	<div style="width: 25%; float: right; margin-top: 73px;">
	<a class="twitter-timeline" href="https://twitter.com/NASDAQ" data-widget-id="725003621507682304">Tweets by @NASDAQ</a>
	</div>

	<table width="75%">
	<col width="40%">
  	<col width="40%">
  	<col width="25%">
  	<tr>
  		<select class="stock-selector" style='width:200px; margin: 20px 0px' >
    		<option></option>
		</select>
  	</tr>
	<tr>
		<td  align="center">
			<div id="realTimeWithPredictionStockChart" style="height: 400px;">
			</div>
		</td>
		<td  align="center">
			<div id="historicalWithPredictionStockChart" style="height: 400px;">
			</div>
		</td>
	</tr>
	<tr>
		<td width="50%" id="indiSelect" style="display:none;">
		<select class="indicator-selector" style='width:200px; margin: 20px 0px;'>
    		<option value="onBalanceVolume">On Balance Volume</option>
    		<option value="simpleMovingAverage">Simple Moving Average</option>
    		
		</select>
		<div id="indicatorChart" style="height: 400px; min-width: 310px">
		</td>
	</tr>
	</table>

 	<!--Twitter Script-->
    <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
   
    <!--ADDING AJAX CALLS ON SUBMIT-->
    <!-- Overriding submit with ajax call-->
    <script type="text/javascript">

	    $(document).ready(function() {
	    	var user = document.getElementById("userid").value;
	    	$.getJSON('http://localhost:3000/getAllStocks?user='+user, function(data){
	    		$(".stock-selector").select2({
				  	data: data,
				  	placeholder: "Select a stock",
				  	allowClear: true
			  	});
	    	});
	    	$(".indicator-selector").select2({
			  	placeholder: "Select an Indicator",
			  	allowClear: true
		  	});
		  	$('#cssmenu').prepend('<div id="bg-one"></div><div id="bg-two"></div><div id="bg-three"></div><div id="bg-four"></div>');
		});
	    var selectedStock;
	    ///STOCK SELECTOR
	    var $eventSelect = $(".stock-selector");
	    $eventSelect.on("select2:select", function (e) { 
	    	selectedStock = e.params.data.id;    //or data.text
	    	createRealTimeWithPredictionChart(selectedStock);
	    	createHistoricalWithPredictionChart(selectedStock);
	    	document.getElementById("indiSelect").style.display = "table-cell";
	    	createOnBalanceMovingAverageChart(selectedStock);
	    }); 

	    //Indicator Selector
	    var $indicatorEventSelect = $(".indicator-selector");
	    $indicatorEventSelect.on("select2:select", function (e) { 
	    	var selectedIndicator = e.params.data.id;    //or data.text
	    	if(selectedIndicator == "simpleMovingAverage")
	    		createSimpleMovingAverageChart(selectedStock);
	    	if(selectedIndicator == "onBalanceVolume")
	    		createOnBalanceMovingAverageChart(selectedStock);
	    }); 


	    //STOCK CHART
	    // Load the fonts
	    //CHART DESIGN - BEGIN
		Highcharts.createElement('link', {
		   href: '//fonts.googleapis.com/css?family=Unica+One',
		   rel: 'stylesheet',
		   type: 'text/css'
		}, null, document.getElementsByTagName('head')[0]);

		Highcharts.theme = {
		   colors: ["#2b908f", "#90ee7e", "#f45b5b", "#7798BF", "#aaeeee", "#ff0066", "#eeaaee",
		      "#55BF3B", "#DF5353", "#7798BF", "#aaeeee"],
		   chart: {
		      backgroundColor: {
		         linearGradient: { x1: 0, y1: 0, x2: 1, y2: 1 },
		         stops: [
		            [0, '#2a2a2b'],
		            [1, '#3e3e40']
		         ]
		      },
		      style: {
		         fontFamily: "'Unica One', sans-serif"
		      },
		      plotBorderColor: '#606063'
		   },
		   title: {
		      style: {
		         color: '#E0E0E3',
		         textTransform: 'uppercase',
		         fontSize: '20px'
		      }
		   },
		   subtitle: {
		      style: {
		         color: '#E0E0E3',
		         textTransform: 'uppercase'
		      }
		   },
		   xAxis: {
		      gridLineColor: '#707073',
		      labels: {
		         style: {
		            color: '#E0E0E3'
		         }
		      },
		      lineColor: '#707073',
		      minorGridLineColor: '#505053',
		      tickColor: '#707073',
		      title: {
		         style: {
		            color: '#A0A0A3'

		         }
		      }
		   },
		   yAxis: {
		      gridLineColor: '#707073',
		      labels: {
		         style: {
		            color: '#E0E0E3'
		         }
		      },
		      lineColor: '#707073',
		      minorGridLineColor: '#505053',
		      tickColor: '#707073',
		      tickWidth: 1,
		      title: {
		         style: {
		            color: '#A0A0A3'
		         }
		      }
		   },
		   tooltip: {
		      backgroundColor: 'rgba(0, 0, 0, 0.85)',
		      style: {
		         color: '#F0F0F0'
		      }
		   },
		   plotOptions: {
		      series: {
		         dataLabels: {
		            color: '#B0B0B3'
		         },
		         marker: {
		            lineColor: '#333'
		         }
		      },
		      boxplot: {
		         fillColor: '#505053'
		      },
		      candlestick: {
		         lineColor: 'white'
		      },
		      errorbar: {
		         color: 'white'
		      }
		   },
		   legend: {
		      itemStyle: {
		         color: '#E0E0E3'
		      },
		      itemHoverStyle: {
		         color: '#FFF'
		      },
		      itemHiddenStyle: {
		         color: '#606063'
		      }
		   },
		   credits: {
		      style: {
		         color: '#666'
		      }
		   },
		   labels: {
		      style: {
		         color: '#707073'
		      }
		   },

		   drilldown: {
		      activeAxisLabelStyle: {
		         color: '#F0F0F3'
		      },
		      activeDataLabelStyle: {
		         color: '#F0F0F3'
		      }
		   },

		   navigation: {
		      buttonOptions: {
		         symbolStroke: '#DDDDDD',
		         theme: {
		            fill: '#505053'
		         }
		      }
		   },

		   // scroll charts
		   rangeSelector: {
		      buttonTheme: {
		         fill: '#505053',
		         stroke: '#000000',
		         style: {
		            color: '#CCC'
		         },
		         states: {
		            hover: {
		               fill: '#707073',
		               stroke: '#000000',
		               style: {
		                  color: 'white'
		               }
		            },
		            select: {
		               fill: '#000003',
		               stroke: '#000000',
		               style: {
		                  color: 'white'
		               }
		            }
		         }
		      },
		      inputBoxBorderColor: '#505053',
		      inputStyle: {
		         backgroundColor: '#333',
		         color: 'silver'
		      },
		      labelStyle: {
		         color: 'silver'
		      }
		   },

		   navigator: {
		      handles: {
		         backgroundColor: '#666',
		         borderColor: '#AAA'
		      },
		      outlineColor: '#CCC',
		      maskFill: 'rgba(255,255,255,0.1)',
		      series: {
		         color: '#7798BF',
		         lineColor: '#A6C7ED'
		      },
		      xAxis: {
		         gridLineColor: '#505053'
		      }
		   },

		   scrollbar: {
		      barBackgroundColor: '#808083',
		      barBorderColor: '#808083',
		      buttonArrowColor: '#CCC',
		      buttonBackgroundColor: '#606063',
		      buttonBorderColor: '#606063',
		      rifleColor: '#FFF',
		      trackBackgroundColor: '#404043',
		      trackBorderColor: '#404043'
		   },

		   // special colors for some of the
		   legendBackgroundColor: 'rgba(0, 0, 0, 0.5)',
		   background2: '#505053',
		   dataLabelsColor: '#B0B0B3',
		   textColor: '#C0C0C0',
		   contrastTextColor: '#F0F0F3',
		   maskColor: 'rgba(255,255,255,0.3)'
		};
		//CHART DESIGN END
		// Apply the theme
		Highcharts.setOptions(Highcharts.theme);
	    function createRealTimeWithPredictionChart(selectedStock) {
		    var seriesOptions = [],
		        seriesCounter = 0,
		        name = selectedStock;

		    /**
		     * Create the chart when all data is loaded
		     * @returns {undefined}
		     */
		    function createChart() {

		        $('#realTimeWithPredictionStockChart').highcharts('StockChart', {

		            rangeSelector: {
		                selected: 4
		            },

		            yAxis: {
		                labels: {
		                    formatter: function () {
		                        return (this.value > 0 ? ' + ' : '') + this.value;
		                    }
		                },
		                plotLines: [{
		                    value: 0,
		                    width: 2,
		                    color: 'silver'
		                }]
		            },

		            plotOptions: {
		                series: {
		                    compare: 'undefined'
		                }
		            },

		            title : {
		                text : selectedStock + ' Real Time With Prediction'
		            },

		            tooltip: {
		                pointFormat: '<span style="color:{series.color}">{series.name}</span>: <b>{point.y} USD</b> ({point.change} USD)<br/>',
		                changeDecimals: 2,
		                valueDecimals: 2
		            },

		            series: seriesOptions
		        });
		    }


	        $.getJSON('http://localhost:3000/getRealTimeStockData?stock='+name,    function (data) {

	            seriesOptions[0] = {
	                name: name + " ACTUAL STOCK DATA",
	                data: data
	            };

	            // As we're loading the data asynchronously, we don't know what order it will arrive. So
	            // we keep a counter and create the chart when all the data is loaded.
	            seriesCounter += 1;

	            if (seriesCounter === 2) {
	                createChart();
	            }
	        });

	        $.getJSON('http://localhost:3000/getBayesianPrediction?stock='+name,    function (data) {

	            seriesOptions[1] = {
	                name: name + " PREDICTED STOCK DATA",
	                data: data
	            };

	            // As we're loading the data asynchronously, we don't know what order it will arrive. So
	            // we keep a counter and create the chart when all the data is loaded.
	            seriesCounter += 1;

	            if (seriesCounter === 2) {
	                createChart();
	            }
	        });
	    
		}

		function createHistoricalWithPredictionChart(selectedStock) {
		    var seriesOptions = [],
		        seriesCounter = 0,
		        name = selectedStock;

		    /**
		     * Create the chart when all data is loaded
		     * @returns {undefined}
		     */
		    function createChart() {

		        $('#historicalWithPredictionStockChart').highcharts('StockChart', {

		            rangeSelector: {
		                selected: 4
		            },

		            yAxis: {
		                labels: {
		                    formatter: function () {
		                        return (this.value > 0 ? ' + ' : '') + this.value;
		                    }
		                },
		                plotLines: [{
		                    value: 0,
		                    width: 2,
		                    color: 'silver'
		                }]
		            },

		            plotOptions: {
		                series: {
		                    compare: 'undefined'
		                }
		            },

		            title : {
		                text : selectedStock + ' Historical With Prediction'
		            },

		            tooltip: {
		                pointFormat: '<span style="color:{series.color}">{series.name}</span>: <b>{point.y} USD</b> ({point.change} USD)<br/>',
		                changeDecimals: 2,
		                valueDecimals: 2
		            },

		            series: seriesOptions
		        });
		    }


	        $.getJSON('http://localhost:3000/getRealTimeStockData?stock='+name,    function (data) {

	            seriesOptions[0] = {
	                name: name + " ACTUAL STOCK DATA",
	                data: data
	            };

	            // As we're loading the data asynchronously, we don't know what order it will arrive. So
	            // we keep a counter and create the chart when all the data is loaded.
	            seriesCounter += 1;

	            if (seriesCounter === 2) {
	                createChart();
	            }
	        });

	        $.getJSON('http://localhost:3000/getBayesianPrediction?stock='+name,    function (data) {

	            seriesOptions[1] = {
	                name: name + " PREDICTED STOCK DATA",
	                data: data
	            };

	            // As we're loading the data asynchronously, we don't know what order it will arrive. So
	            // we keep a counter and create the chart when all the data is loaded.
	            seriesCounter += 1;

	            if (seriesCounter === 2) {
	                createChart();
	            }
	        });
	    
		}


		function createOnBalanceMovingAverageChart(selectedStock) {

		    $.getJSON('http://localhost:3000/onBalanceVolume?stock='+selectedStock, function (data) {
		        // Create the chart
		        $('#indicatorChart').highcharts('StockChart', {


		            rangeSelector : {
		                selected : 1
		            },

		            title : {
		                text : selectedStock+ ' On Balance Volume'
		            },

		            series : [{
		                name : selectedStock,
		                data : data,
		                tooltip: {
		                    valueDecimals: 2
		                }
		            }]
		        });
		    });

		}

    </script>

  </body>
</html>
